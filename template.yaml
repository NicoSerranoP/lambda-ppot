# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  lambda-ppot

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  requestRetrievalFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: request-retrieval.requestRetrievalHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 256
      Timeout: 100
      Description: Get request to retrieve images from S3 Glacier Archive.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the EmailsTable
      - DynamoDBCrudPolicy:
          TableName: !Ref EmailsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          REGION: eu-central-1
          EMAILS_TABLE: !Ref EmailsTable
          TRIES_LIMIT: 3
          TIME_TO_EXPIRE_CONFIRMED_EMAIL: 20
          TIME_TO_EXPIRE_SPAM: 40
      Events:
        Api:
          Type: Api
          Properties:
            Path: /request-retrieval
            Method: POST
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/handlers/request-retrieval.ts

  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable



  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  EmailsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "perpetual-powers-of-tau"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: "email"
          AttributeType: "S"
        -
          AttributeName: "expiration"
          AttributeType: "N"
        -
          AttributeName: "tries"
          AttributeType: "N"
      KeySchema:
        -
          AttributeName: "email"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "expiration"
        Enabled: true

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      AutoConfigurationEnabled: 'true'
    DependsOn: ApplicationResourceGroup
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
